PERS_NRO = mean(PERS_NRO, na.rm = TRUE),
IDIOMA = calcular_moda(IDIOMA)
)
dflectura$UBIGEO <- sprintf("%06d", as.integer(dflectura$UBIGEO))
dflectura <- merge(dflectura, ubigeos, by = "UBIGEO")
prov_leer <- dflectura %>%
group_by(NOMBPROV) %>%
summarise(
IDIOMA = calcular_moda(IDIOMA),
PERS_NRO = mean(PERS_NRO, na.rm = TRUE),
leen_si = sum(leen_si, na.rm = TRUE),
leen_no = sum(leen_no, na.rm = TRUE),
leen_total = sum(leen_total, na.rm = TRUE)
)
dep_leer <- dflectura %>%
group_by(NOMBDEP) %>%
summarise(
IDIOMA = calcular_moda(IDIOMA),
PERS_NRO = mean(PERS_NRO, na.rm = TRUE),
leen_si = sum(leen_si, na.rm = TRUE),
leen_no = sum(leen_no, na.rm = TRUE),
leen_total = sum(leen_total, na.rm = TRUE)
)
prov_leer$tasa_leer <- (prov_leer$leen_si / prov_leer$leen_total) * 3
dep_leer$tasa_leer <- (dep_leer$leen_si / dep_leer$leen_total) * 100
# Lista de dataframes
lista_depa <- list(dep_edu, dep_inter, dep_leer, dep_vivienda)
# Mergear los dataframes usando reduce y full_join
df_total_departamento <- Reduce(function(x, y) full_join(x, y, by = "NOMBDEP"), lista_depa)
# Lista de dataframes
lista_prov <- list(prov_edu, prov_inter, prov_leer, prov_vivienda)
# Mergear los dataframes usando reduce y full_join
df_total_provincia <- Reduce(function(x, y) full_join(x, y, by = "NOMBPROV"), lista_prov)
ubigeos$ubidepa <- as.numeric(substr(as.character(ubigeos$UBIGEO), 1, 2))
ubigeos$ubidepa <- sprintf("%02d", as.integer(ubigeos$ubidepa))
ubidepas <- ubigeos %>%
group_by(NOMBDEP) %>%
summarise(
UBIGEO = calcular_moda(ubidepa)
)
ubidepas <- ubidepas[complete.cases(ubidepas), ]
df_total_departamento <- merge(df_total_departamento, ubidepas, by = "NOMBDEP", all = TRUE)
export(df_total_departamento, "depatasa_total.csv")
export(df_total_provincia, "provtasa_total.csv")
library(rio)
parlamentito = import("legislaturas_ppkuy.xlsx")
library(dplyr)
parlamentito <- parlamentito %>%
mutate(tipo = case_when(
grepl("Ley", Título, ignore.case = TRUE) ~ "LEY",
grepl("Reforma", Título, ignore.case = TRUE) ~ "REFORMA",
TRUE ~ "OTRO"
))
library(dplyr)
library(stringr)
# Crear un vector con las palabras clave y sus variaciones (simplificado para el ejemplo)
palabras_clave <- c("ADICIONA", "AMPLÍA", "APRUEBA", "AUMENTA", "AUTORIZA", "CONSTITUYE", "CREA",
"DECLARA", "DEROGA", "DISPONE", "ESTABLECE", "EXCLUYE", "FACILITA", "FACULTA",
"FOMENTA", "FORTALECE", "GARANTIZA", "HABILITA", "IMPLEMENTA", "INCENTIVA",
"INCLUYE", "INCORPORA", "MEJORA", "MODIFICA", "OTORGA", "OTRO", "PERMITE",
"PRECISA", "PROHIBE", "PROMUEVE", "PROPONE", "RECONOCE", "REDUCE", "REGULA",
"RESTITUYE", "RESTRINGE", "SANCIONA", "SUSTITUYE", "TRANSFIERE")
# Crear una lista de patrones de expresiones regulares para cada palabra clave
# Aquí incluimos algunas variaciones comunes como sufijos y prefijos
patrones <- c("ADICIONA.*", "AMPL[IÍ]A.*", "APRUEB.*", "AUMENTA.*", "AUTORIZ.*", "CONSTITUY.*", "CREA.*",
"DECLARA.*", "DEROGA.*", "DISPONE.*", "ESTABLEC.*", "EXCLUY.*", "FACILITA.*", "FACULT.*",
"FOMENTA.*", "FORTALEC.*", "GARANTIZ.*", "HABILITA.*", "IMPLEMENTA.*", "INCENTIVA.*",
"INCLUY.*", "INCORPORA.*", "MEJORA.*", "MODIFICA.*", "OTORG.*", "OTR.*", "PERMITE.*",
"PRECISA.*", "PROHIBE.*", "PROMUEV.*", "PROPONE.*", "RECONOC.*", "REDUCE.*", "REGULA.*",
"RESTITUY.*", "RESTRING.*", "SANCION.*", "SUSTITUY.*", "TRANSFIERE.*")
# Crear un data frame con palabras clave y sus patrones
df_palabras <- data.frame(palabra = palabras_clave, patron = patrones, stringsAsFactors = FALSE)
# Función para detectar y asignar palabras clave a la columna 'Objetivo'
asignar_objetivo <- function(titulo) {
# Verificar si "DECLARA" está presente
if (str_detect(titulo, regex("DECLARA.*", ignore_case = TRUE))) {
return("DECLARA")
}
# Buscar todas las palabras clave excepto "CREA"
otros_objetivos <- sapply(df_palabras$patron[df_palabras$palabra != "CREA"], function(patron) {
ifelse(str_detect(titulo, regex(patron, ignore_case = TRUE)),
df_palabras$palabra[df_palabras$patron == patron], NA)
})
# Filtrar los resultados no NA
otros_objetivos <- otros_objetivos[!is.na(otros_objetivos)]
# Si hay otros objetivos, devolver el primero
if (length(otros_objetivos) > 0) {
return(otros_objetivos[1])
}
# Si no hay otros objetivos y "CREA" está presente, verificar posición
if (str_detect(titulo, regex("CREA.*", ignore_case = TRUE))) {
# Dividir el título en palabras
palabras <- unlist(str_split(titulo, "\\s+"))
# Verificar si "CREA" está entre las primeras 3 palabras o si es la única palabra clave
if (any(str_detect(palabras[1:min(3, length(palabras))], regex("CREA.*", ignore_case = TRUE))) ||
length(otros_objetivos) == 0) {
return("CREA")
}
}
# Si no hay coincidencias, devolver NA
return(NA)
}
# Aplicar la función a la columna 'título' y crear la columna 'Objetivo'
parlamentito <- parlamentito %>%
mutate(Objetivo = sapply(Título, asignar_objetivo))
parlamentito <- parlamentito %>%
mutate(Objetivo = if_else(tipo == "REFORMA", "MODIFICA", Objetivo))
parlamentito <- parlamentito %>%
mutate(Objetivo = ifelse(is.na(Objetivo), "OTRO", Objetivo))
parlamentito <- parlamentito %>%
mutate(Legislatura = gsub("-", "", sub("(\\d{4})-(\\d{2})-\\d{2}", "\\2\\1", Legislatura)))
table(parlamentito$Estado)
# Definir los valores permitidos
valores_permitidos <- c('Al Archivo', 'Dictamen Negativo', 'Rechazado de Plano', 'Publicado El Peruano')
# Modificar los valores
parlamentito <- parlamentito %>%
mutate(Estado = ifelse(Estado %in% valores_permitidos, Estado, 'Otro'))
parlamentito <- parlamentito %>%
select(-Título)
library(ggplot2)
library(dplyr)
library(RColorBrewer)
# Obtener los 6 objetivos con más valores
top_objetivos <- parlamentito %>%
count(Objetivo) %>%
top_n(5, wt = n) %>%
pull(Objetivo)
# Filtrar los datos para incluir solo esos objetivos
parlamentito_filtrado <- parlamentito %>%
filter(Objetivo %in% top_objetivos)
# Usar una paleta de colores de RColorBrewer
n <- length(top_objetivos)
# Seleccionar una paleta de colores que combine bien con un fondo blanco
custom_palette <- c("#4E79A7", "#F28E2B", "#E15759", "#76B7B2",
"#59A14F", "#EDC948", "#B07AA1", "#FF9DA7",
"#9C755F", "#BAB0AC")
# Usar solo los colores necesarios
color_palette <- custom_palette[1:n]
ggplot(parlamentito, aes(x = Bancada, fill = Estado)) +
geom_bar(position = "dodge") +
geom_text(aes(label = ..count..), stat = "count", position = position_dodge(width = 0.9), vjust = -0.5, size = 3, face = "bold") +
labs(x = "Bancada Parlamentaria", y = "Cantidad de Proyectos de Ley", fill = "Estado del Proyecto de Ley") +
ggtitle("Proyectos de ley de la Comisión de Descentralización (2016-2019)") +
theme_bw() +
scale_fill_manual(values = color_palette) +
theme(
plot.title = element_text(size = 14, face = "bold"),
axis.title = element_text(size = 12),
axis.text = element_text(size = 10),
legend.title = element_text(size = 12),
legend.text = element_text(size = 10)
)
library(ggplot2)
library(stringr)
# Ajustar los nombres del eje x a dos líneas
parlamentito_filtrado$Estado <- str_wrap(parlamentito_filtrado$Estado, width = 10)
ggplot(parlamentito_filtrado, aes(x = Estado, fill = Objetivo)) +
geom_bar(position = "dodge") +
geom_text(aes(label = ..count..), stat = "count", position = position_dodge(width = 0.9), vjust = -0.5, size = 3.5) +
labs(x = "Estado del Proyecto de Ley", y = "Cantidad de Proyectos de Ley", fill = "Objetivo del Proyecto de Ley") +
ggtitle("Proyectos de ley de la Comisión de Descentralización (2016-2019)") +
theme_bw() +
scale_fill_manual(values = color_palette) +
theme(
plot.title = element_text(size = 14, face = "bold"),
axis.title = element_text(size = 12),
axis.text = element_text(size = 10),
legend.title = element_text(size = 12),
legend.text = element_text(size = 10)
)
parlamentito$Presentación = as.factor(parlamentito$Presentación)
str(parlamentito)
export(parlamentito, "congreso_rctm.xlsx")
ggplot(parlamentito_filtrado, aes(x = Bancada, fill = Objetivo)) +
geom_bar(position = "dodge") +
geom_text(aes(label = ..count..), stat = "count", position = position_dodge(width = 0.9), vjust = -0.5, size = 3) +
labs(x = "Bancada Parlamentaria", y = "Cantidad de Proyectos de Ley", fill = "Objetivo del Proyecto de Ley") +
ggtitle("Proyectos de ley de la Comisión de Descentralización (2016-2019)") +
theme_bw() +
scale_fill_manual(values = color_palette) +
theme(
plot.title = element_text(size = 14, face = "bold"),
axis.title = element_text(size = 12),
axis.text = element_text(size = 10),
legend.title = element_text(size = 12),
legend.text = element_text(size = 10)
)
kuchinski = import("PE_BD.xlsx")
kuchinski <- kuchinski %>%
mutate(tipo = case_when(
grepl("Reforma", Título, ignore.case = TRUE) ~ "REFORMA",
grepl("Ley", Título, ignore.case = TRUE) ~ "LEY",
TRUE ~ "OTRO"
))
library(dplyr)
library(stringr)
kuchinski <- kuchinski %>%
mutate(Objetivo = sapply(Título, asignar_objetivo))
kuchinski <- kuchinski %>%
mutate(Objetivo = if_else(tipo == "REFORMA", "MODIFICA", Objetivo))
kuchinski <- kuchinski %>%
mutate(Objetivo = ifelse(is.na(Objetivo), "OTRO", Objetivo))
kuchinski <- kuchinski %>%
mutate(Estado = ifelse(Estado %in% valores_permitidos, Estado, 'Otro'))
library(ggplot2)
library(dplyr)
library(RColorBrewer)
# Obtener los 6 objetivos con más valores
altitos <- kuchinski %>%
count(Objetivo) %>%
top_n(5, wt = n) %>%
pull(Objetivo)
# Filtrar los datos para incluir solo esos objetivos
cuysito <- kuchinski %>%
filter(Objetivo %in% altitos)
# Usar una paleta de colores de RColorBrewer
p <- length(altitos)
# Definir una paleta de colores personalizada con colores vibrantes
custom_palette <- c("#4E79A7", "#F28E2B", "#E15759", "#76B7B2",
"#59A14F", "#EDC948", "#B07AA1", "#FF9DA7",
"#9C755F", "#BAB0AC")
# Usar solo los colores necesarios
color_palette <- custom_palette[1:p]
# Crear el gráfico
# Crear el gráfico
ggplot(cuysito, aes(x = Estado, fill = Objetivo)) +
geom_bar(position = "dodge") +
geom_text(aes(label = ..count..), stat = "count", position = position_dodge(width = 0.9), vjust = -0.5, size = 3) +
labs(
x = "Estado del Proyecto de Ley",
y = "Cantidad de Proyectos de Ley",
fill = "Objetivo del Proyecto de Ley",
title = "Proyectos de ley impulsados desde el Ejecutivo (2016-2019)",
subtitle = "Comisión de Descentralización"
) +
theme_bw() +
scale_fill_manual(values = color_palette) +
theme(
plot.title = element_text(size = 14, face = "bold"),
plot.subtitle = element_text(size = 12),  # Estilo del subtítulo
axis.title = element_text(size = 12),
axis.text = element_text(size = 10),
legend.title = element_text(size = 12),
legend.text = element_text(size = 10)
)
kuchinski$Presentación = as.factor(kuchinski$Presentación)
library(rio)
data = import("inversion_china_peru.xlsx")
data
str(data)
library(plotly)
library(ggplot2)
library(dplyr)
library(RColorBrewer)
data <- data %>%
mutate(Month_Num = match(Month, month.name),  # Convertir nombre del mes a número
Year_Month = as.Date(paste(Year, Month_Num, "01", sep = "-"), "%Y-%m-%d")) # Fecha solo para ordenar
# Crear gráfico de líneas
p3 <- ggplot(data, aes(x = Year_Month, y = Amount, color = Type, group = Type,
text = paste("Año:", Year, "<br>Mes:", Month, "<br>Monto:", Amount, "millones USD"))) +
geom_line(size = 0.5, alpha = 0.8) +  # Línea más gruesa y con transparencia
geom_point(size = 1, alpha = 0.7) +  # Puntos más grandes y diferenciados por forma
labs(title = "Evolución Temporal de Inversión y Construcción",
x = "Año",
y = "Monto (millones de dólares)",
color = "Tipo") +
theme_minimal() +
scale_x_date(date_breaks = "1 year", date_labels = "%Y") +  # Mostrar todos los años en el eje X
theme(axis.text.x = element_text(angle = 45, hjust = 1),
legend.title = element_blank())  # Ocultar título de la leyenda
ggplotly(p3, tooltip = "text")
ggplotly(p3, tooltip = "text")
tabla_inversion <- data %>%
filter(Type == "Investment") %>%
group_by(Investor_Builder) %>%
summarise(Total_Investment = sum(Amount)) %>%
arrange(desc(Total_Investment))
tabla_inversion
sector_data <- data %>%
filter(Type == "Investment") %>%
group_by(Sector) %>%
summarise(Total = sum(Amount, na.rm = TRUE)) %>%
mutate(Percentage = round(100 * Total / sum(Total), 1))  # Calcular porcentaje
p4_plotly
colores_sobrios <- c("#4E79A7", "#F28E2B", "#E15759", "#76B7B2", "#59A14F", "#EDC949", "#B07AA1")
p4_plotly <- plot_ly(sector_data,
labels = ~Sector,
values = ~Total,
type = 'pie',
textinfo = 'label+percent',  # Dentro del gráfico: Sector y porcentaje
insidetextfont = list(color = '#FFFFFF'),  # Texto dentro del gráfico en blanco
hoverinfo = 'label+value+percent',  # Tooltip: Sector, monto exacto y porcentaje
marker = list(colors = colores_sobrios,
line = list(color = '#FFFFFF', width = 1))) %>%
layout(title = "Distribución de la Inversión China por Sector",
showlegend = TRUE,
margin = list(l = 50, r = 50, t = 50, b = 50))  # Ajusta márgenes para mejor visualización
colores_sobrios <- c("#4E79A7", "#F28E2B", "#E15759", "#76B7B2", "#59A14F", "#EDC949", "#B07AA1")
p4_plotly <- plot_ly(sector_data,
labels = ~Sector,
values = ~Total,
type = 'pie',
textinfo = 'label+percent',  # Dentro del gráfico: Sector y porcentaje
insidetextfont = list(color = '#FFFFFF'),  # Texto dentro del gráfico en blanco
hoverinfo = 'label+value+percent',  # Tooltip: Sector, monto exacto y porcentaje
marker = list(colors = colores_sobrios,
line = list(color = '#FFFFFF', width = 1))) %>%
layout(title = "Distribución de la Inversión China por Sector",
showlegend = TRUE,
margin = list(l = 50, r = 50, t = 50, b = 50))  # Ajusta márgenes para mejor visualización
p4_plotly
p_tota <- data %>%
group_by(Sector) %>%
summarise(Total = sum(Amount, na.rm = TRUE)) %>%
mutate(Percentage = round(100 * Total / sum(Total), 1))  # Calcular porcentaje
colores_sobrios <- c("#4E79A7", "#F28E2B", "#E15759", "#76B7B2", "#59A14F", "#EDC949", "#B07AA1")
p6_ly <- plot_ly(p_tota,
labels = ~Sector,
values = ~Total,
type = 'pie',
textinfo = 'label+percent',  # Dentro del gráfico: Sector y porcentaje
insidetextfont = list(color = '#FFFFFF'),  # Texto dentro del gráfico en blanco
hoverinfo = 'label+value+percent',  # Tooltip: Sector, monto exacto y porcentaje
marker = list(colors = colores_sobrios,
line = list(color = '#FFFFFF', width = 1))) %>%
layout(title = "Distribución de la Inversión China por Sector",
showlegend = TRUE,
margin = list(l = 50, r = 50, t = 50, b = 50))  # Ajusta márgenes para mejor visualización
p6_ly
p_tota <- data %>%
group_by(Sector) %>%
summarise(Total = sum(Amount, na.rm = TRUE)) %>%
mutate(Percentage = round(100 * Total / sum(Total), 1))  # Calcular porcentaje
colores_sobrios <- c("#4E79A7", "#F28E2B", "#E15759", "#76B7B2", "#59A14F", "#EDC949", "#B07AA1")
p6_ly <- plot_ly(p_tota,
labels = ~Sector,
values = ~Total,
type = 'pie',
textinfo = 'label+percent',  # Dentro del gráfico: Sector y porcentaje
insidetextfont = list(color = '#FFFFFF'),  # Texto dentro del gráfico en blanco
hoverinfo = 'label+value+percent',  # Tooltip: Sector, monto exacto y porcentaje
marker = list(colors = colores_sobrios,
line = list(color = '#FFFFFF', width = 1))) %>%
layout(title = "Distribución de la Inversión China por Sector",
showlegend = TRUE,
margin = list(l = 40, r = 50, t = 50, b = 50))  # Ajusta márgenes para mejor visualización
p6_ly
library(plotly)
library(dplyr)
# Crear subdata con totales por sector
p_tota <- data %>%
group_by(Sector) %>%
summarise(Total = sum(Amount, na.rm = TRUE)) %>%
mutate(Percentage = round(100 * Total / sum(Total), 1))  # Calcular porcentaje
# Paleta de colores sobria con buen contraste
colores_sobrios <- c("#4E79A7", "#F28E2B", "#E15759", "#76B7B2", "#59A14F", "#EDC949", "#B07AA1")
# Crear gráfico interactivo mejorado
p6_ly <- plot_ly(p_tota,
labels = ~Sector,
values = ~Total,
type = 'pie',
textinfo = 'label+percent',  # Sector y porcentaje dentro del gráfico
insidetextfont = list(color = '#FFFFFF', size = 14),  # Texto interno más grande
hoverinfo = 'label+value+percent',  # Tooltip: Sector, monto exacto y porcentaje
marker = list(colors = colores_sobrios,
line = list(color = '#FFFFFF', width = 1))) %>%
layout(title = "Distribución de la Inversión China por Sector",
showlegend = TRUE,
margin = list(l = 80, r = 80, t = 80, b = 80),  # Márgenes más amplios
height = 600,  # Aumentar el tamaño del gráfico
width = 800,   # Aumentar el ancho para más espacio
uniformtext = list(minsize = 12, mode = "hide"))  # Ajuste automático del texto interno
# Mostrar el gráfico interactivo
p6_ly
p6_ly <- plot_ly(p_tota,
labels = ~Sector,
values = ~Total,
type = 'pie',
textinfo = 'percent',  # Solo el porcentaje dentro del gráfico
insidetextfont = list(color = '#FFFFFF', size = 12),  # Texto interno más pequeño
hoverinfo = 'label+value+percent',  # Tooltip: Sector, monto exacto y porcentaje
marker = list(colors = colores_sobrios,
line = list(color = '#FFFFFF', width = 1))) %>%
layout(title = "Distribución de la Inversión China por Sector",
showlegend = TRUE,
legend = list(orientation = "h", y = -0.2),  # Poner la leyenda debajo del gráfico
margin = list(l = 50, r = 50, t = 50, b = 100),  # Márgenes mejorados
height = 500,  # Tamaño más compacto
width = 700)  # Ancho adecuado para la leyenda
# Mostrar el gráfico interactivo
p6_ly
p6_ly <- plot_ly(p_tota,
labels = ~Sector,
values = ~Total,
type = 'pie',
textinfo = 'percent',  # Solo el porcentaje dentro del gráfico
insidetextfont = list(color = '#FFFFFF', size = 12),  # Texto interno más claro
hoverinfo = 'label+value+percent',  # Tooltip: Sector, monto exacto y porcentaje
marker = list(colors = colores_sobrios,
line = list(color = '#FFFFFF', width = 1))) %>%
layout(title = "Distribución de la Inversión China por Sector",
showlegend = TRUE,
legend = list(x = 1.1, y = 0.5),  # Leyenda a la derecha
margin = list(l = 50, r = 150, t = 50, b = 50),  # Más espacio a la derecha
height = 500,  # Tamaño compacto
width = 700)  # Ancho adecuado
# Mostrar el gráfico interactivo
p6_ly
tabla_inversion <- data %>%
group_by(Investor_Builder) %>%
summarise(Total_Investment = sum(Amount)) %>%
arrange(desc(Total_Investment))
tabla_inversion
data <- data %>%
mutate(Month_Num = match(Month, month.name),  # Convertir nombre del mes a número
Year_Month = as.Date(paste(Year, Month_Num, "01", sep = "-"), "%Y-%m-%d")) # Fecha solo para ordenar
# Crear gráfico de líneas
p3 <- ggplot(data, aes(x = Year_Month, y = Amount,
text = paste("Año:", Year, "<br>Mes:", Month, "<br>Monto:", Amount, "millones USD"))) +
geom_line(size = 0.5, alpha = 0.8) +  # Línea más gruesa y con transparencia
geom_point(size = 1, alpha = 0.7) +  # Puntos más grandes y diferenciados por forma
labs(title = "Evolución Temporal de Inversión y Construcción",
x = "Año",
y = "Monto (millones de dólares)",
color = "Tipo") +
theme_minimal() +
scale_x_date(date_breaks = "1 year", date_labels = "%Y") +  # Mostrar todos los años en el eje X
theme(axis.text.x = element_text(angle = 45, hjust = 1),
legend.title = element_blank())  # Ocultar título de la leyenda
ggplotly(p3, tooltip = "text")
library(rio)
data = import("inversion_china_peru.xlsx")
data
str(data)
library(plotly)
library(ggplot2)
library(dplyr)
library(RColorBrewer)
data <- data %>%
mutate(Month_Num = match(Month, month.name),  # Convertir nombre del mes a número
Year_Month = as.Date(paste(Year, Month_Num, "01", sep = "-"), "%Y-%m-%d"))  # Crear fecha para ordenar
# Crear gráfico de líneas con color azul
p3 <- ggplot(data, aes(x = Year_Month, y = Amount, group = 1,  # Agrupar para trazar la línea
text = paste("Año:", Year, "<br>Mes:", Month, "<br>Monto:", Amount, "millones USD"))) +
geom_line(color = "#4E79A7", size = 1, alpha = 0.8) +  # Línea azul más gruesa y con transparencia
geom_point(color = "#4E79A7", size = 2, alpha = 0.9) +  # Puntos azules más visibles
labs(title = "Evolución Temporal de Inversión y Construcción",
x = "Año",
y = "Monto (millones de dólares)") +
theme_minimal() +
scale_x_date(date_breaks = "1 year", date_labels = "%Y") +  # Mostrar todos los años en el eje X
theme(axis.text.x = element_text(angle = 45, hjust = 1))  # Inclinar etiquetas para mejor lectura
# Convertir a gráfico interactivo
ggplotly(p3, tooltip = "text")
data <- data %>%
mutate(Month_Num = match(Month, month.name),  # Convertir nombre del mes a número
Year_Month = as.Date(paste(Year, Month_Num, "01", sep = "-"), "%Y-%m-%d"))  # Crear fecha para ordenar
# Crear gráfico de líneas con color azul
p3 <- ggplot(data, aes(x = Year_Month, y = Amount, group = 1,  # Agrupar para trazar la línea
text = paste("Año:", Year, "<br>Mes:", Month, "<br>Monto:", Amount, "millones USD"))) +
geom_line(color = "#4E79A7", size = 0.8, alpha = 0.8) +  # Línea azul más gruesa y con transparencia
geom_point(color = "#4E79A7", size = 1, alpha = 0.9) +  # Puntos azules más visibles
labs(title = "Evolución Temporal de Inversión y Construcción",
x = "Año",
y = "Monto (millones de dólares)") +
theme_minimal() +
scale_x_date(date_breaks = "1 year", date_labels = "%Y") +  # Mostrar todos los años en el eje X
theme(axis.text.x = element_text(angle = 45, hjust = 1))  # Inclinar etiquetas para mejor lectura
# Convertir a gráfico interactivo
ggplotly(p3, tooltip = "text")
data <- data %>%
mutate(Month_Num = match(Month, month.name),  # Convertir nombre del mes a número
Year_Month = as.Date(paste(Year, Month_Num, "01", sep = "-"), "%Y-%m-%d"))  # Crear fecha para ordenar
# Crear gráfico de líneas con color azul
p3 <- ggplot(data, aes(x = Year_Month, y = Amount, group = 1,  # Agrupar para trazar la línea
text = paste("Año:", Year, "<br>Mes:", Month, "<br>Monto:", Amount, "millones USD"))) +
geom_line(color = "#4E79A7", size = 0.8, alpha = 0.8) +  # Línea azul más gruesa y con transparencia
geom_point(color = "#4E79A7", size = 1, alpha = 0.9) +  # Puntos azules más visibles
labs(title = "Evolución Temporal de Inversión china",
x = "Año",
y = "Monto (millones de dólares)") +
theme_minimal() +
scale_x_date(date_breaks = "1 year", date_labels = "%Y") +  # Mostrar todos los años en el eje X
theme(axis.text.x = element_text(angle = 45, hjust = 1))  # Inclinar etiquetas para mejor lectura
# Convertir a gráfico interactivo
ggplotly(p3, tooltip = "text")
p_tota <- data %>%
group_by(Sector) %>%
summarise(Total = sum(Amount, na.rm = TRUE)) %>%
mutate(Percentage = round(100 * Total / sum(Total), 1))  # Calcular porcentaje
# Paleta de colores sobria y con buen contraste
colores_sobrios <- c("#4E79A7", "#F28E2B", "#E15759", "#76B7B2", "#59A14F", "#EDC949", "#B07AA1")
# Crear gráfico interactivo mejorado
p6_ly <- plot_ly(p_tota,
labels = ~Sector,
values = ~Total,
type = 'pie',
textinfo = 'percent',  # Solo el porcentaje dentro del gráfico
insidetextfont = list(color = '#FFFFFF', size = 12),  # Texto interno más claro
hoverinfo = 'label+value+percent',  # Tooltip: Sector, monto exacto y porcentaje
marker = list(colors = colores_sobrios,
line = list(color = '#FFFFFF', width = 1))) %>%
layout(title = "Distribución de la Inversión China por Sector",
showlegend = TRUE,
legend = list(x = 1.1, y = 0.5),  # Leyenda a la derecha
margin = list(l = 50, r = 150, t = 50, b = 50),  # Más espacio a la derecha
height = 500,  # Tamaño compacto
width = 700)  # Ancho adecuado
# Mostrar el gráfico interactivo
p6_ly
install.packages("DT")
setwd("C:/Users/Romina/Documents/GitHub/china_investment")
